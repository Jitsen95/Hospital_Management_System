package com.HMS.Department.ServiceImpl;


import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import com.HMS.Department.Dto.ApiResponseDto;
import com.HMS.Department.Dto.DepartmentDto;
import com.HMS.Department.Dto.DoctorDto;
import com.HMS.Department.Model.Department;
import com.HMS.Department.Repository.DepartmentRepository;
import com.HMS.Department.Service.APIClient;
import com.HMS.Department.Service.DepartmentService;

@Service
public class DepartmentServiceImpl implements DepartmentService {

	@Autowired
	DepartmentRepository departmentRepo;

	@Autowired
	ModelMapper mapper;
	
	@Autowired
	RestTemplate restTemplate;
	
	@Autowired
	WebClient webClient;
	
	@Autowired
	private APIClient apiClient;

	@Override
	public DepartmentDto createDepartment(DepartmentDto departmentDto) {

		String departmentId = UUID.randomUUID().toString();
		departmentDto.setDepartmentId(departmentId);
		Department department = mapper.map(departmentDto, Department.class);
		Department savedDepart = departmentRepo.save(department);
		DepartmentDto savedDto = mapper.map(savedDepart, DepartmentDto.class);
		return savedDto;
	}

	@Override
	public DepartmentDto findById(String departmentId) {
		Department department = departmentRepo.findById(departmentId)
				.orElseThrow(() -> new RuntimeException("Not Found With This Id!!!"));
		DepartmentDto departmentDto = mapper.map(department, DepartmentDto.class);
		return departmentDto;
	}
	public DepartmentDto findByDepartmentId(String departmentId) {
		Department department = departmentRepo.findById(departmentId)
				.orElseThrow(() -> new RuntimeException("Not Found With This Id!!!"));
		DepartmentDto departmentDto = mapper.map(department, DepartmentDto.class);
		return departmentDto;
	}
	@Override
	public List<DepartmentDto> findAllDepartment() {
		List<Department> departmentList = departmentRepo.findAll();
		List<DepartmentDto> DepartmentDtoList = departmentList.stream().map(e -> mapper.map(e, DepartmentDto.class))
				.collect(Collectors.toList());
		return DepartmentDtoList;
	}

	@Override
	public DepartmentDto updateDepartment(DepartmentDto departmentDto, String departmentId) {
		Department department = departmentRepo.findById(departmentId)
				.orElseThrow(() -> new RuntimeException("Not Found With This Id!!!"));
		department.setDepartmentName(departmentDto.getDepartmentName());
		department.setDepartmentDescription(departmentDto.getDepartmentDescription());
		department.setDepartmentCode(departmentDto.getDepartmentCode());
		Department updatedDepartment=departmentRepo.save(department);
		DepartmentDto departmentDto1=mapper.map(updatedDepartment,DepartmentDto.class);
		return departmentDto1;
	}

	@Override
	public String deleteDepartmentById(String departmentId) {
		Department department = departmentRepo.findById(departmentId)
				.orElseThrow(() -> new RuntimeException("Not Found With This Id!!!"));
		departmentRepo.deleteById(departmentId);
		
		return "Department Removed!!!";
	}

	@Override
	public ApiResponseDto findByCode(String departmentCode) {
		Department department=departmentRepo.findByDepartmentCode(departmentCode);
		DepartmentDto dtoCode=mapper.map(department,DepartmentDto.class);
		ResponseEntity<List<DoctorDto>> res = restTemplate.exchange("http://localhost:8080/Doctor/byCode/"+dtoCode.getDepartmentCode(),
				HttpMethod.GET,null,
				new ParameterizedTypeReference<List<DoctorDto>>() {});
		List<DoctorDto> doctorDto= res.getBody();
		ApiResponseDto apiResponseDto=new ApiResponseDto();
		apiResponseDto.setDepartment(dtoCode);
		apiResponseDto.setDoctor(doctorDto);
		return apiResponseDto;
	}

	@Override
	public DepartmentDto findByDepartmentName(String departmentName) {
		Department department=departmentRepo.findByDepartmentName(departmentName);
		DepartmentDto departmentDto=mapper.map(department, DepartmentDto.class);
		return departmentDto;
	}

	@Override
	public DepartmentDto findByDepartmentCode(String departmentCode) {
		Department department=departmentRepo.findByDepartmentCode(departmentCode);
		DepartmentDto departmentDto=mapper.map(department, DepartmentDto.class);
		return departmentDto;
	}
	
	@Override
	public ApiResponseDto findByDepartmentNameWithDoctorList(String departmentName) {
		Department department=departmentRepo.findByDepartmentName(departmentName);
		DepartmentDto departmentDto=mapper.map(department, DepartmentDto.class);
		ResponseEntity<List<DoctorDto>> responseEntity=restTemplate.exchange("http://localhost:8080/Doctor/byDepartmentName/"+departmentDto.getDepartmentName(),
				HttpMethod.GET,
				null,
				new ParameterizedTypeReference<List<DoctorDto>>() {});
		List<DoctorDto> listOfDoctors=responseEntity.getBody();
		ApiResponseDto apiResponse=new ApiResponseDto();
		apiResponse.setDepartment(departmentDto);
		apiResponse.setDoctor(listOfDoctors);
		return apiResponse;
	}

	@Override
	public ApiResponseDto findByDepartmentCodeWithDoctorList(String departmentCode) {
		Department department=departmentRepo.findByDepartmentCode(departmentCode);
		DepartmentDto departmentDto=mapper.map(department, DepartmentDto.class);
		List<DoctorDto> listOfDoctorDto=webClient.get().uri("http://localhost:8080/Doctor/byDepartmentCode/"+departmentDto.getDepartmentCode())
		.retrieve()
		.bodyToMono(new ParameterizedTypeReference<List<DoctorDto>>() {})
		.block();
		ApiResponseDto apiResponseDto=new ApiResponseDto();
		apiResponseDto.setDepartment(departmentDto);
		apiResponseDto.setDoctor(listOfDoctorDto);
		return apiResponseDto;
	}

}
